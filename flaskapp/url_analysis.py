#from flaskapp import pythonwhois as pywhoisimport pythonwhois as pywhoisfrom pythonwhois.shared import WhoisExceptionimport socketfrom requests.exceptions import HTTPErrorclass url_analysis:    # FIELDS    __url_to_analyse = None    __metadata_fake = None    __metadata_true = None    __resulting_dictionary = None    def __init__(self, url_to_analyse, metadata_fake, metadata_true, helpful_functions):        self.__reset()        self.__url_to_analyse = url_to_analyse        self.__metadata_fake = metadata_fake        self.__metadata_true = metadata_true        self.__helpful_functions = helpful_functions    # URL CALCULATIONS:    def __url_analysis(self):        # looking for creation date        try:            year = self.__query_url()        except (TypeError, KeyError):            year = 2000        # print('PRINTING YEAR ' + str(year))        # DEPRECATE the original year_bias function        # year_bias = self.__year_bias(year)        # better year_bias calculated by sigmoid_year() function        year_bias = self.__sigmoid_year(year)        self.__resulting_dictionary = {'result': year_bias}    # getter    def get_url_dictionary(self):        self.__url_analysis()        return self.__resulting_dictionary    # HELPFUL FUNCTIONS    def __query_url(self):        nr_of_exception = 0        if self.__url_to_analyse in self.__metadata_true.keys():            try:                return int(self.__metadata_true[self.__url_to_analyse]['creation_date'][0].year)            except (KeyError, ValueError):                return 2000        elif self.__url_to_analyse in self.__metadata_fake.keys():            try:                return int(self.__metadata_fake[self.__url_to_analyse]['creation_date'][0].year)            except (KeyError, ValueError):                return 2000        else:            try:                query = pywhois.get_whois(self.__url_to_analyse)                return query['creation_date'][0].year            except (HTTPError, ConnectionResetError, UnicodeDecodeError):                if nr_of_exception == 0:                    self.__helpful_functions.wait_random_time(45)                    nr_of_exception += 1                else:                    return 2000            # except (KeyError, ValueError, socket.gaierror, pywhois.shared.WhoisException):            except (KeyError, ValueError, socket.gaierror, WhoisException):                return 2000    def __reset(self):        self.__url_to_analyse = None        self.__metadata_fake = None        self.__metadata_true = None        self.__resulting_dictionary = None        # sigmoid year is probably better feature than year bias    def __sigmoid_year(self, year):        return [self.__helpful_functions.sigmoid(year)]